{-# LANGUAGE OverloadedStrings, DeriveGeneric #-}

import           Network.HTTP.Client      (newManager, managerSetProxy)
import           Network.HTTP.Client.TLS  (tlsManagerSettings)
import           Web.Telegram.API.Bot
import           Control.Concurrent
import           Data.Aeson.Lens
import qualified Data.ByteString.Lazy as LBS
import           Data.ByteString.Lazy.Char8 as Char8 (pack, unpack, dropWhile, reverse)
import           Data.Text as T (pack, unpack)
import           Database.PostgreSQL.Simple
import           GHC.Int
import           Data.List.Split
import           Data.String
import           Network.Wreq
import           Control.Lens
import           Data.Char (isSpace)
import           Data.Time.Clock



myToken :: Token
myToken = Token "bot789825659:AAFrTqMAKl3zmK_x05cOm66KmRpiTREWETU"

postgresConnection = connectPostgreSQL "host='localhost' port=5432 dbname='postgres' user='ilya' password='qwerty'"

myThreadDelay = 1000000

adminId = 129563384

main :: IO ()
main = do
  manager <- newManager tlsManagerSettings

  conn <- postgresConnection

  print "start!"

  myResult <- runTelegramClient myToken manager $ do
  
    let messageRequest = sendMessageRequest (ChatId adminId) "Bot started!"
  
    let myGetUpdatesRequest = getUpdatesRequest
  
    updates <- getUpdatesM myGetUpdatesRequest
    
    sendMessageM messageRequest

  case myResult of 
    Left error -> print "Request failed"
    Right response -> print ((chat_id (chat (result response))))

  isContinuing <- myCycle 0
  
  print myResult
  
  print "finish!"



myCycle :: Int -> IO ()
myCycle x = do

  delay <- threadDelay myThreadDelay

  manager <- newManager tlsManagerSettings

  myResult <- runTelegramClient myToken manager $ do
    let getUpdatedRequest = GetUpdatesRequest (Just x) Nothing Nothing Nothing
    
    getUpdatesM getUpdatedRequest

  case myResult of
    Right response -> do
      let updates = result response
  
      let updatesSize = length updates

      if updatesSize > 0 then do
        let update = (head updates)

        isUpdated <- telegramUpdate update
  
        myCycle ((update_id update) + 1)

      else (myCycle x)

    _ -> print "No updates"

  print "Finish!"


telegramUpdate update = do
  manager <- newManager tlsManagerSettings

  let mes = (message update)

  case mes of
    Just m -> do
      let id = chat_id (chat m)

      let myText = text m

      case myText of
        Just text -> do
          res <- botBody (fromIntegral id) (T.unpack text)
          
          print "Message sent!"
        Nothing -> print "No message!"
    
    Nothing -> print "No message!"


botBody id text = do
    conn <- postgresConnection

    lastmes <- getLastmes id

    print lastmes

    if text == "/start" then do
      res <- inDataBase id

      username <- getUsername id
      
      if not res then do
        execute conn "insert into users (name, lastmes, user_id) values (?, ?, ?)" (username :: String, text :: String, id :: Int) :: IO GHC.Int.Int64

        print (show "Not in bd!")
      else print "In bd!"

      mySendMessageWithButtons (fromIntegral id) "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –¥—Ä—É–≥!üëã\n\n‚ö°Ô∏è–Ø –±–æ—Ç HiddenLinks –∏ —è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤ –ø—Ä–∏—Ä–æ–¥–µ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä—è—á–µ—Ç —Å—Å—ã–ª–∫–∏ —Å —Ç–∞–∫–∏—Ö —Ñ–∞–π–ª–æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –∫–∞–∫:\n‚Ä¢ üìÄYandexDisk\n‚Ä¢ ‚òÅÔ∏è–û–±–ª–∞–∫–æ Mail  \n‚Ä¢ üõ∞Google Drive\n\nüíÅ‚ôÇÔ∏è–î–ª—è —á–µ–≥–æ —è —ç—Ç–æ –¥–µ–ª–∞—é? –í—Å–µ —á–∞—â–µ –∏ —á–∞—â–µ —Ä–∞–±–æ—á–∏–µ —Å—Å—ã–ª–∫–∏ —Å –∏–Ω—Ñ–æ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—è–º–∏, –∏ —ç—Ç–æ —Å–∏–ª—å–Ω–æ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç –æ–±—É—á–µ–Ω–∏–µ. \n\nüòé–ò–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –ø—Ä—è—Ç–∞—Ç—å —Å—Å—ã–ª–∫–∏ –æ—Ç –∑–ª–æ–¥–µ–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–∂–µ –∏ —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –ª—é–±–∏–º—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n–£–∑–Ω–∞—Ç—å –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞–≤ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫—É ‚ùìFAQ" startButtons
    
    else do
      case text of
        "üôè–ü–æ–ª—É—á–∏—Ç—å ID" -> do
          updateLastmes "get_id" id
          
          print "get_id"
          
          mySendMessageHTML (fromIntegral id) "üïπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ <b>Yandex.Disc –ª–∏–±–æ Cloud.Mail</b>, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å –µ–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.\n\n–Ø –≤—ã–¥–∞–º –≤–∞–º <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID</b> –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ"
        "‚òÅÔ∏è–°–∫–∞—á–∞—Ç—å –ø–æ ID" -> do
          updateLastmes "get_link" id
          
          print "get_link"
          
          mySendMessageHTML (fromIntegral id) "üïπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>#540</b> —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <b>–ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É</b> –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞."
        "‚ùìFAQ" -> do
          print "faq"
          
          mySendMessageHTML (fromIntegral id) "‚ùì<b>FAQ (–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º)</b>\n\n‚ùóÔ∏è–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –∏–ª–∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –∫—É—Ä—Å—ã —á–µ—Ä–µ–∑ –º–µ–Ω—è.\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∫—É—Ä—Å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ‚òÅÔ∏è<b>–°–∫–∞—á–∞—Ç—å –ø–æ ID</b>, –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –Ω–æ–º–µ—Ä <b>(–ü—Ä–∏–º–µ—Ä: #540)</b>, –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É (–∫–æ—Ç–æ—Ä–∞—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É –≤–∞—Å) –≤ ID, —á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å—Å—è –µ–π —Å –¥—Ä—É–∑—å—è–º–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É\nüôè–ü–æ–ª—É—á–∏—Ç—å ID –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É (–ü—Ä–∏–º–µ—Ä: https://disk.yandex.ru/d/gggggggggg)\n–Ø –≤—ã–¥–∞–º –≤–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –Ω–æ–º–µ—Ä, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç–Ω–æ —Å–∫–∞—á–∞—Ç—å –ª—é–±–æ–π —Ñ–∞–π–ª —Å –æ–±–ª–∞–∫–∞, –ø—Ä–∏ —ç—Ç–æ–º —Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Ç–∞–π–Ω–µ."
        "‚òéÔ∏è–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞" -> do
          print "support"
          
          mySendMessageHTML (fromIntegral id) "<b> üìå –ü–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–∞—Å –≤–æ–ø—Ä–æ—Å–∞–º, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É</b> ‚û°Ô∏è @MarshMallowBitch"
        "/add" -> do
          print "adding title"

          updateLastmes "/add" id

          mySendMessageHTML (fromIntegral id) "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #540 –∏ –¥–∞–ª–µ–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –¥–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É."
        "üìï –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞" -> do
          print "library"

          titled_links <- getTitledLinks

          let ans = createLibraryReply titled_links
          
          mySendMessageHTML (fromIntegral id) (T.pack ans)
          
          print (show ans)          
         
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" -> do
          print "stats"

          reply <- getStats 

          mySendMessageHTML (fromIntegral id) (T.pack reply)

        _ -> do
          case lastmes of 
            "get_id" -> do
          
              let pos = findStr "cloud.mail.ru" text
          
              case pos of
                Just p -> do
          
                  print "found"
          
                  js <- getJSON text
          
                  curTime <- getCurrentTime
          
                  let timed = floor $ utctDayTime curTime :: Int
          
                  execute conn "insert into links (link, json_result, time) values (?, ?, ?)" (text :: String, js :: String, timed :: Int) :: IO GHC.Int.Int64
                  
                  xs <- query_ conn "select id from links order by id desc limit 1" :: IO [Only Int]
                  
                  let last_id = (show (fromOnly (head xs)) :: String)
                  
                  let reply = "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É!\n\n–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏: #" ++ last_id
                  
                  mySendMessageHTML (fromIntegral id) (T.pack reply)
                  
                  updateLastmes text id
                  
                  print "success"
                Nothing -> do
                  print "not found"
                  
                  mySendMessageHTML (fromIntegral id) "‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
            
            "get_link" -> do
              if substring 0 1 text == "#" then do
                
                let link_id = substring 1 (length text) text
            
                link <- getLinkById link_id
                
                let opts = defaults & param "link" .~ [T.pack link]
            
                request <- getWith opts "https://bestproger.ru/abot/linker.php"
                
                let names = request ^.. responseBody . values . key "name" . _String
                let links = request ^.. responseBody . values . key "link" . _String
                let sizes = request ^.. responseBody . values . key "size" . _String
                
                let glowed_links = sumStringList links

                let params = defaults & param "links" .~ [T.pack glowed_links]
                                      & param "id" .~ [T.pack (link_id)]
            
                response <- getWith params "https://bestproger.ru/abot/get_links.php"

                let reply = sumList names sizes links link_id 0

                mySendMessageHTML (fromIntegral id) (T.pack reply)

                updateLastmes text id

                print (response)
            
              else do
                mySendMessageHTML (fromIntegral id) "‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å—Å—ã–ª–∫–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
            
                print "Wrong ID"
            
            "/add" -> do
              
              let splited_text = mysplit text
              
              let link_id_full = getByIndex splited_text 0
              
              let title = getByIndex splited_text 1
              
              let link_id = (substring 1 (length link_id_full) link_id_full)
              
              rows <- execute conn "update links set title=? where id=?" (text :: String, link_id :: String) :: IO GHC.Int.Int64

              updateLastmes text id

              let reply = "–û–ø–∏—Å–∞–Ω–∏–µ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É —Å ID " ++ link_id_full ++ " —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"

              mySendMessageHTML (fromIntegral id) (T.pack reply)

              print title
            _ -> print "Not in case"


getByIndex (x : xs) index = if index == 0 then x else getByIndex xs (index - 1)

myslice from to xs = take (to - from + 1) (drop from xs)

mysplit :: String -> [String]
mysplit [] = [""]
mysplit (c:cs) | c == ' '  = "" : rest
               | otherwise = (c : head rest) : tail rest
    where rest = mysplit cs


sumStringList [] = ""
sumStringList (x : xs) = (T.unpack x) ++ ":::" ++ sumStringList xs


sumList [] [] [] link_id count = ""
sumList (x : xs) (z : zs) (y: ys) link_id count = "<b>" ++ (T.unpack x) ++ " (" ++ (T.unpack z) ++ ")</b>\n" ++ "https://bestproger.ru/abot/downloader.php?id=" ++ (link_id) ++ "_" ++ (show count) ++ "\n\n" ++ sumList xs zs ys link_id (count + 1)


substring :: Int -> Int -> String -> String
substring start end text = take (end - start) (drop start text)


getJSON link = do
    let text = link
    
    let opts = defaults & param "link" .~ [T.pack text]
    
    request <- getWith opts "https://bestproger.ru/abot/linker.php"
    
    return $ Char8.unpack $ trim (request ^. responseBody)
  where trim = Char8.reverse . (Char8.dropWhile isSpace) . Char8.reverse . (Char8.dropWhile isSpace)


findStr :: String -> String -> Maybe Int
findStr sub s
 | length sub > length s = Nothing
 | take (length sub) s == sub = Just 0
 | otherwise = fmap (+1) $ findStr sub $ drop 1 s


getTitledLinks = do
  conn <- postgresConnection
  query_ conn "select * from links where title != ''" :: IO [(Int, String, String, Int, String)]


createLibraryReply :: [(Int, String, String, Int, String)] -> String
createLibraryReply ar = foldr (\(x, y, z, c, d) b -> "<b>" ++ d ++ "</b>\n\n" ++ b) mempty ar


getUsername id = do
  manager <- newManager tlsManagerSettings

  ret <- runTelegramClient myToken manager $ do
    getChatM (T.pack (show id))
  
  case ret of
    Right response -> do
      
      let username = (chat_username (result response))
      
      case username of
        
        Just u -> return ("@" ++ (T.unpack u))
        
        Nothing -> return "@"
    
    _ -> return ""


updateLastmes lastmes id = do
  
  conn <- postgresConnection
  
  rows <- execute conn "update users set lastmes=? where user_id=?" (lastmes :: String, id :: Int) :: IO GHC.Int.Int64
  
  return True


getLastmes id = do
  
  conn <- postgresConnection
  
  xs <- query conn "select lastmes from users where user_id=?" (Only id) :: IO [Only String]
  
  let lastmes = fromOnly (head xs)
  
  return lastmes


getLinkById link_id = do

  conn <- postgresConnection

  xs <- query conn "select link from links where id=?" (Only link_id) :: IO [Only String]

  let link = fromOnly (head xs)

  return link


mySendMessageHTML id text = do
  manager <- newManager tlsManagerSettings

  ret <- runTelegramClient myToken manager $ do
    let message_request = SendMessageRequest (ChatId id) text (Just HTML) Nothing Nothing Nothing Nothing

    sendMessageM message_request

  print "HTML message sent!"


mySendMessageWithButtons id text kb = do
  manager <- newManager tlsManagerSettings

  ret <- runTelegramClient myToken manager $ do
    let message_request = SendMessageRequest (ChatId id) text (Just HTML) Nothing Nothing Nothing (Just kb)
    
    sendMessageM message_request

  print "Message with buttons Sent!"


startButtons = myReplyKeyboardMarkup [[keyboardButton "üôè–ü–æ–ª—É—á–∏—Ç—å ID", keyboardButton "‚òÅÔ∏è–°–∫–∞—á–∞—Ç—å –ø–æ ID"], [keyboardButton "üìï –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞", keyboardButton "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], [keyboardButton "‚ùìFAQ", keyboardButton "‚òéÔ∏è–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞"]]

myReplyKeyboardMarkup keyboard = ReplyKeyboardMarkup keyboard (Just True) (Just False) (Just True)


inDataBase id = do
  conn <- postgresConnection

  xs <- query conn "select count(*) as count from users where user_id=?" (Only id) :: IO [Only Int]

  let count = fromOnly (head xs)

  print count

  if count > 0 then return True else return False


getStats = do
  conn <- postgresConnection

  xs <- query_ conn "select count(*) as count from users" :: IO [Only Int]

  let countUsers = fromOnly (head xs)

  ys <- query_ conn "select count(*) as count from links where title != ''" :: IO [Only Int]

  let countTitledLinks = fromOnly (head ys)

  print countUsers

  let res = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: " ++ (show countUsers) ++ "\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ: " ++ (show countTitledLinks)
  return res
